generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id           String                     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  location     String?
  participants ParticipantsOnCategories[]
  votes        Votes[]

  @@map("categories")
}

model Participant {
  id         String                     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  thumbnail  String
  website    String?                    @default("#")
  mapsAnchor String?                    @default("#")
  categories ParticipantsOnCategories[]
  votes      Votes[]

  @@map("participants")
}

model ParticipantsOnCategories {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  participant   Participant @relation(fields: [participantId], references: [id])
  category      Category    @relation(fields: [categoryId], references: [id])
  participantId String      @db.ObjectId
  categoryId    String      @db.ObjectId

  @@unique([participantId, categoryId])
  @@map("participants_on_categories")
}

model Votes {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  participant   Participant @relation(fields: [participantId], references: [id])
  category      Category    @relation(fields: [categoryId], references: [id])
  participantId String      @db.ObjectId
  categoryId    String      @db.ObjectId

  @@unique([participantId, categoryId])
  @@map("votes")
}
